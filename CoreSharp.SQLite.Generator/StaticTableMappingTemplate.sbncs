// MIT License

// Copyright (c) 2021 NantCom Co., Ltd.
// by Jirawat Padungkijjanont (jirawat[at]nant.co)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
using System;
using System.Text.Json;
using System.Collections.Generic;
using NC.SQLite;

using Sqlite3Statement = System.IntPtr;

namespace {{Namespace}}
{
    /// <summary>
    /// Auto-Generated Table Mapping Class for {{MappedClassName}}
    /// </summary>
    public partial class {{MappedClassName}}TableMapping : StaticTableMapping<{{MappedClassName}}>
    {
        /// <summary>
        /// Name of the Table created in SQLite Database (Set to {{TableName}})
        /// </summary>
        public override string TableName => "{{TableName}}";
        
        /// <summary>
        /// CreateFlags as set in source {{CreateFlagsAsSpecified}}
        /// </summary>
        public virtual CreateFlags Flags => (CreateFlags){{CreateFlagsInt}};
        
        protected override string InsertCommand => "{{SQLCommands["Insert"]}}";
        protected override string ReplaceCommand => "{{SQLCommands["Replace"]}}";
        protected override string UpdateCommand => "{{SQLCommands["Update"]}}";
        protected override string DeleteCommand => "{{SQLCommands["Delete"]}}";

        /// <summary>
        /// Create New Instance of {{MappedClassName}}TableMapping
        /// </summary>
        public {{MappedClassName}}TableMapping()
        {
            this.Columns = new();            

            {{ $i = 0 }}
            {{for column in ColumnMappingModels}}
            this.Columns["{{column.ColumnName}}"] = new StaticColumnMapping<{{MappedClassName}}>()
            {
                ColumnName = "{{column.ColumnName}}",
                Setter = (target, value) => target.{{column.PropertyName}} = ({{column.PropertyType}})value,
                Getter = (source) => source.{{column.PropertyName}},
                PropertyName = "{{column.PropertyName}}",
                ColumnIndex = {{$i}}
            };            
            {{ $i = $i + 1 }}
            {{-end }}

            
            {{for column in ColumnMappingModels}}
            _MappedColumnNames["{{column.PropertyName}}"] = "{{column.ColumnName}}";
            {{-end }}

        }

        /// <summary>
        /// Drops the table
        /// </summary>
        /// <param name="connection"></param>
        /// <returns></returns>
        public override int DropTable( SQLiteConnection connection )
        {
            return connection.ExecuteNonQuery("drop table if exists \"{{TableName}}\"");
        }

        public override void CreateTable(SQLiteConnection connection)
        {
            connection.ExecuteNonQuery("{{SQLCommands["Create"]}}");
        }
        
        public override void MigrateTable(SQLiteConnection connection, List<string> existingColumns)
        {
			// this dictionary contains list of columns and
			// commands to alter table and create column
			// existing column will remove item in this dictionary            
            var allColumns = new Dictionary<string, string>();

            /* var addCol = "alter table \"" + map.TableName + "\" add column " + Orm.SqlDecl(p, StoreDateTimeAsTicks, StoreTimeSpanAsTicks);*/

            {{- for column in ColumnMappingModels}}
            allColumns["{{column.ColumnName}}"] = "alter table \"{{TableName}}\" add column {{column.SQLColumnDeclaration}}";
            {{-end }}

            // remove columns that already exists in the database
            foreach (var column in existingColumns)
            {
                if (allColumns.ContainsKey(column))
                {
					allColumns.Remove(column);
                }
            }

            // allColumns now contains only missing column
            // execute command to create them
            foreach (var column in allColumns)
            {
				connection.ExecuteNonQuery(column.Value);
			}
        }
        
        public override void CreateIndex(SQLiteConnection connection)
        {
            {{ for cmd in IndexCommands}}
            connection.ExecuteNonQuery( "{{cmd}}" );
            {{ end }}
        } 
        
        public override int Insert(SQLiteConnection connection, {{MappedClassName}} input, bool replace)
        {
			if (replace)
            {
                {{ if HasAutoIncrementPrimaryKey }}
                if ( input.{{PrimaryKey.PropertyName}} != default({{PrimaryKey.PropertyType}}) )
                {
                    return this.Replace(connection, input);
                }
                {{ end }}
            }            
            
            {{ if PrimaryKey != null && PrimaryKey.IsAutoGuid }}            
            if ( input.{{PrimaryKey.PropertyName}} == Guid.Empty )
            {
                input.{{PrimaryKey.PropertyName}} = Guid.NewGuid();
            }
            {{- end }}

            var cmd = this.GetPreparedInsertCommand(connection);
            cmd.ParameterBinder = (stmt) =>
            {
                {{ $i = 1 }}
                {{- for column in InsertColumns-}}
                {{-$value = "input." + column.PropertyName-}}
                {{- column.SQLite3BindFunctionCall | string.replace "(index)" $i | string.replace "(value)" $value -}};
                {{ $i = $i + 1 }}
                {{- end }}
            };

			var count = cmd.ExecuteNonQuery();
            {{ if HasAutoIncrementPrimaryKey }}
            if ( count == 1 )
            {
                input.{{PrimaryKey.PropertyName}} = ({{PrimaryKey.PropertyType}})connection.GetLastInsertedId();
            }
            {{ end }}                

            return count;
        }

		protected override int Replace(SQLiteConnection connection, {{MappedClassName}} input)
		{
            {{ if HasAutoIncrementPrimaryKey }}
            if ( input.{{PrimaryKey.PropertyName}} == default({{PrimaryKey.PropertyType}}) )
            {
                throw new InvalidOperationException("For Replace, Primary key must not be default value");
            }
            {{ end }}       

			var cmd = this.GetPreparedReplaceCommand(connection);
            cmd.ParameterBinder = (stmt) =>
            {
                {{ $i = 1 }}
                {{- for column in ColumnMappingModels-}}
                {{-$value = "input." + column.PropertyName-}}
                {{- column.SQLite3BindFunctionCall | string.replace "(index)" $i | string.replace "(value)" $value -}};
                {{ $i = $i + 1 }}
                {{- end }}
            };

			var count = cmd.ExecuteNonQuery();
            {{ if HasAutoIncrementPrimaryKey }}
            if ( count == 1 )
            {
                input.{{PrimaryKey.PropertyName}} = ({{PrimaryKey.PropertyType}})connection.GetLastInsertedId();
            }
            {{ end }}                

            return count;
        }
        
        {{ if PrimaryKey != null-}}

		public override int Update(SQLiteConnection connection, {{MappedClassName}} input)
		{
            var cmd = this.GetPreparedUpdateCommand(connection);
			cmd.ParameterBinder = (stmt) =>
			{
                {{ $i = 1 }}
                {{- for column in UpdateColumns-}}
                {{-$value = "input." + column.PropertyName-}}
                {{- column.SQLite3BindFunctionCall | string.replace "(index)" $i | string.replace "(value)" $value -}};
                {{ $i = $i + 1 }}
                {{- end }}
                
                {{-$value = "input." + PrimaryKey.PropertyName-}}
                {{- PrimaryKey.SQLite3BindFunctionCall | string.replace "(index)" $i | string.replace "(value)" $value -}};
            };
            
			return cmd.ExecuteNonQuery();
        }
        
		public override int Delete(SQLiteConnection connection, {{MappedClassName}} input)
		{
            var cmd = this.GetPreparedDeleteCommand(connection);
			cmd.ParameterBinder = (stmt) =>
			{
                {{$value = "input." + PrimaryKey.PropertyName-}}
                {{- PrimaryKey.SQLite3BindFunctionCall | string.replace "(index)" 1 | string.replace "(value)" $value -}};
            };
            
			return cmd.ExecuteNonQuery();
        }
        
		public int DeleteByPrimaryKey(SQLiteConnection connection, {{PrimaryKey.PropertyType}} pk)
		{
            var cmd = this.GetPreparedDeleteCommand(connection);
			cmd.ParameterBinder = (stmt) =>
			{
                {{PrimaryKey.SQLite3BindFunctionCall | string.replace "(index)" 1 | string.replace "(value)" "pk"-}};
			};
			return cmd.ExecuteNonQuery();
        }

		public override int DeleteByPrimaryKey(SQLiteConnection connection, object pk)
		{
            var cmd = this.GetPreparedDeleteCommand(connection);
			cmd.ParameterBinder = (stmt) =>
			{
                {{if ( PrimaryKey.ColumnType | string.starts_with "varchar" )
                    $value = "pk"
                else
                    $value = "(" + PrimaryKey.PropertyType + ")pk"
                end-}}
                {{PrimaryKey.SQLite3BindFunctionCall | string.replace "(index)" 1 | string.replace "(value)" $value-}};
			};
			return cmd.ExecuteNonQuery();
        }

        {{-end }}

        public override {{MappedClassName}} ReadStatementResult(Sqlite3Statement stmt)
        {
            {{MappedClassName}} result = new();
            {{ $i = 0 }}
            {{ for column in ColumnMappingModels-}}
            {{-$value = "result." + column.PropertyName-}}
            {{ $value }} = {{ column.SQLite3ReadFunctionCall | string.replace "(index)" $i -}};
            {{ $i = $i + 1 }}
            {{- end }}
            return result;
        }

    }
}